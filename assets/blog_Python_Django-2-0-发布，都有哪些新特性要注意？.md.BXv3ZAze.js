import{_ as e,c as a,o,ag as i}from"./chunks/framework.CgtRPpXH.js";const g=JSON.parse('{"title":"Django-2-0-发布，都有哪些新特性要注意？","description":"","frontmatter":{"title":"Django-2-0-发布，都有哪些新特性要注意？","tags":["Python","Django"],"categories":["Python"]},"headers":[],"relativePath":"blog/Python/Django-2-0-发布，都有哪些新特性要注意？.md","filePath":"blog/Python/Django-2-0-发布，都有哪些新特性要注意？.md","lastUpdated":1733335015000}'),t={name:"blog/Python/Django-2-0-发布，都有哪些新特性要注意？.md"},l=i('<p><strong>Django 是 Python Web 开发最常用的框架之一，跟进它的最新变化绝对是必须的。</strong></p><p>2017年12月2日，Django官方发布了2.0版本，成为多年来的第一次大版本提升，那么2.0对广大Django使用者有哪些变化和需要注意的地方呢？</p><h2 id="一、python兼容性" tabindex="-1">一、Python兼容性 <a class="header-anchor" href="#一、python兼容性" aria-label="Permalink to &quot;一、Python兼容性&quot;">​</a></h2><p>Django 2.0支持Python3.4、3.5和3.6。Django官方强烈推荐每个系列的最新版本。</p><p><strong>最重要的是Django 2.0不再支持Python2！</strong></p><p>Django 1.11.x是支持Python2.7的最后版本。</p><h2 id="二、2-0新特性" tabindex="-1">二、2.0新特性 <a class="header-anchor" href="#二、2-0新特性" aria-label="Permalink to &quot;二、2.0新特性&quot;">​</a></h2><h3 id="_1-简化了url路由语法" tabindex="-1">1.简化了URL路由语法 <a class="header-anchor" href="#_1-简化了url路由语法" aria-label="Permalink to &quot;1.简化了URL路由语法&quot;">​</a></h3><p><code>django.urls.path()</code>方法的语法更简单了。</p><p>例如以前的： <code>url(r&#39;^articles/(?P&lt;year&gt;[0-9]{4})/$&#39;, views.year_archive),</code></p><p>可以写作： <code>path(&#39;articles/&lt;int:year&gt;/&#39;, views.year_archive),</code></p><p>新语法支持强制定义参数类型。例子中只接收整数型年份参数，不再接收字符串类型，同时&#39;10000&#39;年也是合法的（虽然是5位数字），而不像先前正则里只能接收4位数字。</p><p>以前版本的 <code>django.conf.urls.url()</code>方法变成了 <code>django.urls.re_path()</code>，但为了向后兼容，旧的依然保留，而不是立刻废弃。 <code>django.conf.urls.include()</code>方法现在可以从 <code>django.urls</code>导入，也就是你可以使用 <code>from django.urls import include, path, re_path</code>。</p><h3 id="_2-admin后台对移动端更加友好" tabindex="-1">2.admin后台对移动端更加友好 <a class="header-anchor" href="#_2-admin后台对移动端更加友好" aria-label="Permalink to &quot;2.admin后台对移动端更加友好&quot;">​</a></h3><p>Django最受大家欢迎的admin后台，具有响应式特性，支持主流的移动设备。</p><h3 id="_3-window-表达式" tabindex="-1">3.Window 表达式 <a class="header-anchor" href="#_3-window-表达式" aria-label="Permalink to &quot;3.Window 表达式&quot;">​</a></h3><p>新的Window表达式允许为查询集添加一个OVER从句。</p><h3 id="_4-小特性" tabindex="-1">4.小特性 <a class="header-anchor" href="#_4-小特性" aria-label="Permalink to &quot;4.小特性&quot;">​</a></h3><h4 id="django-contrib-admin后台" tabindex="-1">django.contrib.admin后台 <a class="header-anchor" href="#django-contrib-admin后台" aria-label="Permalink to &quot;django.contrib.admin后台&quot;">​</a></h4><p>新的 <code>ModelAdmin.autocomplete_fields</code>属性和 <code>ModelAdmin.get_autocomplete_fields()</code>方法现在可以在外键和多对多字段上使用Select2搜索框。</p><h4 id="django-contrib-auth用户认证" tabindex="-1">django.contrib.auth用户认证 <a class="header-anchor" href="#django-contrib-auth用户认证" aria-label="Permalink to &quot;django.contrib.auth用户认证&quot;">​</a></h4><p>PBKDF2密码哈希默认的迭代次数从36000增加到100000。</p><h4 id="django-contrib-gis地理框架" tabindex="-1">django.contrib.gis地理框架 <a class="header-anchor" href="#django-contrib-gis地理框架" aria-label="Permalink to &quot;django.contrib.gis地理框架&quot;">​</a></h4><ul><li><p>为AsGeoJSON、GeoHash和GeoHash方法，isvalid和distance查询增加MySQL支持；</p></li><li><p>添加Azimuth和LineLocatePoint方法，支持PostGIS和SpatiaLite；</p></li><li><p>所有从GeoJSON导入的GEOSGeometry拥有SRID集合；</p></li><li><p>添加 <code>OSMWidget.default_zoom</code>属性，用于自定义地图的默认缩放级别；</p></li><li><p>metadata现在是可读可编辑的；</p></li><li><p>允许在GDAL的内部虚拟文件系统中创建GDALRaster对象；</p></li><li><p>新的 <code>GDALBand.color_interp()</code>方法返回波段的颜色说明。</p></li></ul><h4 id="django-contrib-postgres数据库" tabindex="-1">django.contrib.postgres数据库 <a class="header-anchor" href="#django-contrib-postgres数据库" aria-label="Permalink to &quot;django.contrib.postgres数据库&quot;">​</a></h4><ul><li><p>ArrayAgg新增distinct参数；</p></li><li><p>新的RandomUUID函数；</p></li><li><p><code>django.contrib.postgres.indexes.GinIndex</code>现在支持 <code>fastupdate</code>和 <code>gin_pending_list_limit</code>参数；</p></li><li><p>新的GistIndex类允许在数据库中创建GiST索引；</p></li><li><p>inspectdb现在可以内省JSONField和RangeFields。</p></li></ul><h4 id="django-contrib-sitemaps站点地图" tabindex="-1">django.contrib.sitemaps站点地图 <a class="header-anchor" href="#django-contrib-sitemaps站点地图" aria-label="Permalink to &quot;django.contrib.sitemaps站点地图&quot;">​</a></h4><ul><li>为GenericSitemap构造器增加protocol参数；</li></ul><h4 id="cache缓存" tabindex="-1">Cache缓存 <a class="header-anchor" href="#cache缓存" aria-label="Permalink to &quot;Cache缓存&quot;">​</a></h4><ul><li>cache.set_many()现在返回一个列表，包含了插入失败的键值；</li></ul><h4 id="file-storage文件存储" tabindex="-1">File Storage文件存储 <a class="header-anchor" href="#file-storage文件存储" aria-label="Permalink to &quot;File Storage文件存储&quot;">​</a></h4><ul><li><code>File.open()</code>现在可以用于上下文管理器，例如 <code>with file.open() as f:</code>；</li></ul><h4 id="forms表单" tabindex="-1">Forms表单 <a class="header-anchor" href="#forms表单" aria-label="Permalink to &quot;Forms表单&quot;">​</a></h4><ul><li><p><code>SplitDateTimeWidget</code>和 <code>SplitHiddenDateTimeWidget</code>增加 <code>date_attrs</code>与 <code>time_attrs</code>参数，用于为 <code>DateInput</code>与 <code>TimeInput</code>指定HTML属性；</p></li><li><p>新的 <code>Form.errors.get_json_data()</code>方法返回字典类型的表单错误,以适应JSON类型x响应；</p></li></ul><h4 id="generic-views通用视图" tabindex="-1">Generic Views通用视图 <a class="header-anchor" href="#generic-views通用视图" aria-label="Permalink to &quot;Generic Views通用视图&quot;">​</a></h4><ul><li>新的 <code>ContextMixin.extra_context</code>属性允许在 <code>View.as_view()</code>中添加上下文；</li></ul><h4 id="management-commands管理命令" tabindex="-1">Management Commands管理命令 <a class="header-anchor" href="#management-commands管理命令" aria-label="Permalink to &quot;Management Commands管理命令&quot;">​</a></h4><ul><li><p>inspectdb现在将MySQL的无符号整数视作 <code>PositiveIntegerField</code>或者 <code>PositiveSmallIntegerField</code>;</p></li><li><p>新增 <code>makemessages --add-location</code>选项；</p></li><li><p>loaddata现在可以从标准输入读入；</p></li><li><p>新增 <code>diffsettings --output</code>选项；</p></li></ul><h4 id="migrations迁移" tabindex="-1">Migrations迁移 <a class="header-anchor" href="#migrations迁移" aria-label="Permalink to &quot;Migrations迁移&quot;">​</a></h4><ul><li>新增 <code>squashmigrations --squashed-name</code>选项；</li></ul><h4 id="models模型" tabindex="-1">Models模型 <a class="header-anchor" href="#models模型" aria-label="Permalink to &quot;Models模型&quot;">​</a></h4><ul><li><p>新增StrIndex数据库函数；</p></li><li><p>对于Oracle数据库，AutoField和BigAutoField现在会生成identity列；</p></li><li><p><code>QuerySet.iterator()</code>新增 <code>chunk_size</code>参数；</p></li><li><p><code>QuerySet.earliest()</code>、 <code>QuerySet.latest()</code>和 <code>Meta.get_latest_by</code>现在可以根据一些字段进行排序；</p></li><li><p>增加ExtractQuarter方法，用于DateField和DateTimeField；</p></li><li><p>新增TruncQuarter方法用于截取DateField和DateTimeField到季度的第一天；</p></li><li><p>为基于类的索引添加 <code>db_tablespace</code>参数；</p></li><li><p>为 <code>QuerySet.select_for_update()</code>增加of参数，但只支持PostgreSQL和Oracle数据库；</p></li><li><p><code>QuerySet.in_bulk()</code>新增 <code>field_name</code>参数；</p></li><li><p><code>CursorWrapper.callproc()</code>现在接收可选的字典类型关键字参数；</p></li><li><p><code>QuerySet.values_list()</code>新增named参数，用于获取命名的元组结果；</p></li><li><p>新的FilteredRelation类允许为查询集增加一个ON从句；</p></li><li><p>增加 <code>Paginator.get_page()</code>，可以处理各种非法页面参数，防止异常;</p></li></ul><h4 id="requests-and-responses请求和相应" tabindex="-1">Requests and Responses请求和相应 <a class="header-anchor" href="#requests-and-responses请求和相应" aria-label="Permalink to &quot;Requests and Responses请求和相应&quot;">​</a></h4><ul><li>现在，runserver服务器支持HTTP 1.1；</li></ul><h4 id="templates模版" tabindex="-1">Templates模版 <a class="header-anchor" href="#templates模版" aria-label="Permalink to &quot;Templates模版&quot;">​</a></h4><ul><li><p>为了提高 <code>Engine.get_default()</code>在第三方模块的用途，现在它将返回配置在TEMPLATES中的多个DjangoTemplates引擎中的第一个，而不是弹出ImproperlyConfigured错误；</p></li><li><p>自定义模版标签现在接收强制关键字参数；</p></li></ul><h4 id="tests测试" tabindex="-1">Tests测试 <a class="header-anchor" href="#tests测试" aria-label="Permalink to &quot;Tests测试&quot;">​</a></h4><ul><li>为LiveServerTestCase添加多线程支持；</li></ul><h4 id="validators验证器" tabindex="-1">Validators验证器 <a class="header-anchor" href="#validators验证器" aria-label="Permalink to &quot;Validators验证器&quot;">​</a></h4><ul><li>新的ProhibitNullCharactersValidator不允许CharField及其子类的表单输入为空；</li></ul><h2 id="三、重要的向后不兼容" tabindex="-1">三、重要的向后不兼容 <a class="header-anchor" href="#三、重要的向后不兼容" aria-label="Permalink to &quot;三、重要的向后不兼容&quot;">​</a></h2><h3 id="_1-某些地方删除对bytestrings的支持" tabindex="-1">1. 某些地方删除对bytestrings的支持 <a class="header-anchor" href="#_1-某些地方删除对bytestrings的支持" aria-label="Permalink to &quot;1\\. 某些地方删除对bytestrings的支持&quot;">​</a></h3><p>例如，对于reverse()，现在使用str()代替force_text()。</p><h3 id="_2-abstractuser-last-name的最大长度增加到150" tabindex="-1">2. AbstractUser.last_name的最大长度增加到150 <a class="header-anchor" href="#_2-abstractuser-last-name的最大长度增加到150" aria-label="Permalink to &quot;2\\. AbstractUser.last_name的最大长度增加到150&quot;">​</a></h3><p>如果你有一个自定义的用户模型继承了AbstractUser，你需要生成并应用一个数据库迁移，使得 <code>last_name</code>的最大长度变为150。</p><p>如果你需要为 <code>last_name</code>保持30个字符的限制，可以如下使用自定义表单：</p><ol><li><p><code>from django.contrib.auth.forms import UserChangeForm</code></p></li><li><p><code>class MyUserChangeForm(UserChangeForm):</code></p></li><li><p><code>   last_name = forms.CharField(max_length=30, required=False)</code></p></li></ol><p>如果你需要在admin中也保持这个约束，那么可以如下使用UserAdmin.form：</p><ol><li><p><code>from django.contrib.auth.admin import UserAdmin</code></p></li><li><p><code>from django.contrib.auth.models import User</code></p></li><li><p><code>class MyUserAdmin(UserAdmin):</code></p></li><li><p><code>   form = MyUserChangeForm</code></p></li><li><p><code>admin.site.unregister(User)</code></p></li><li><p><code>admin.site.register(User, MyUserAdmin)</code></p></li></ol><h3 id="_3-queryset-reverse-和last-不能用于切片后的查询集" tabindex="-1">3. QuerySet.reverse()和last()不能用于切片后的查询集 <a class="header-anchor" href="#_3-queryset-reverse-和last-不能用于切片后的查询集" aria-label="Permalink to &quot;3\\. QuerySet.reverse()和last()不能用于切片后的查询集&quot;">​</a></h3><p>对切片后的查询集使用反转和获取最近对象的操作将弹出异常，如下所示：</p><ol><li><p><code>&gt;&gt;&gt; Model.objects.all()[:2].reverse()</code></p></li><li><p><code>Traceback (most recent call last):</code></p></li><li><p><code>...</code></p></li><li><p><code>TypeError: Cannot reverse a query once a slice has been taken.</code></p></li></ol><h3 id="_4-表单的字段不再接收可选参数作为位置参数" tabindex="-1">4. 表单的字段不再接收可选参数作为位置参数 <a class="header-anchor" href="#_4-表单的字段不再接收可选参数作为位置参数" aria-label="Permalink to &quot;4\\. 表单的字段不再接收可选参数作为位置参数&quot;">​</a></h3><p>为了防止运行时错误，提高可靠性。以前类似下面的参数传递方法，现在是错误的了： <code>forms.IntegerField(25, 10)</code></p><p>要这么传递： <code>forms.IntegerField(max_value=25, min_value=10)</code></p><h3 id="_5-index不再接收位置参数" tabindex="-1">5. Index不再接收位置参数 <a class="header-anchor" href="#_5-index不再接收位置参数" aria-label="Permalink to &quot;5\\. Index不再接收位置参数&quot;">​</a></h3><p>例如下面的用法将导致异常： <code>models.Index([&#39;headline&#39;, &#39;-pub_date&#39;], &#39;index_name&#39;)</code></p><p>要提供参数关键字，改写为： <code>models.Index(fields=[&#39;headline&#39;, &#39;-pub_date&#39;], name=&#39;index_name&#39;)</code></p><h3 id="_6-call-command-将验证它接收的选项" tabindex="-1">6. call_command()将验证它接收的选项 <a class="header-anchor" href="#_6-call-command-将验证它接收的选项" aria-label="Permalink to &quot;6. call_command()将验证它接收的选项&quot;">​</a></h3><p>对于使用选项而不是使用 <code>parser.add_argument</code>()进行自定义的管理命令，需要添加一个 <code>stealth_options</code>属性，如下所示：</p><ol><li><p><code>class MyCommand(BaseCommand):</code></p></li><li><p><code>   stealth_options = (&#39;option_name&#39;, ...)</code></p></li></ol><h3 id="_7-sqlite现在支持外键约束" tabindex="-1">7. SQLite现在支持外键约束 <a class="header-anchor" href="#_7-sqlite现在支持外键约束" aria-label="Permalink to &quot;7. SQLite现在支持外键约束&quot;">​</a></h3><p>另外，Django2.0还废弃和移除了一些方法和属性。</p>',73),d=[l];function r(n,s,c,p,h,m){return o(),a("div",null,d)}const _=e(t,[["render",r]]);export{g as __pageData,_ as default};
