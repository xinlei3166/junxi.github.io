import{_ as s,c as i,o as a,ag as e}from"./chunks/framework.CgtRPpXH.js";const g=JSON.parse('{"title":"Docker文档","description":"","frontmatter":{"title":"Docker文档","tags":["Docker","容器","虚拟化"],"categories":["Docker"]},"headers":[],"relativePath":"blog/Docker/Docker文档.md","filePath":"blog/Docker/Docker文档.md","lastUpdated":1733335015000}'),t={name:"blog/Docker/Docker文档.md"},h=e(`<h1 id="docker文档" tabindex="-1">Docker文档 <a class="header-anchor" href="#docker文档" aria-label="Permalink to &quot;Docker文档&quot;">​</a></h1><p>Docker是一组平台即服务（PaaS）的产品。它基于操作系统层级的虚拟化技术，将软件与其依赖项打包为容器。托管容器的软件称为Docker引擎。Docker能够帮助开发者在轻量级容器中自动部署应用程序，并使得不同容器中的应用程序彼此隔离，高效工作。该服务有免费和高级版本。它于2013年首次发布，由Docker, Inc.开发。</p><h2 id="docker环境" tabindex="-1">Docker环境 <a class="header-anchor" href="#docker环境" aria-label="Permalink to &quot;Docker环境&quot;">​</a></h2><p><strong>Docker有两个版本：</strong></p><ul><li>社区版（CE）</li><li>企业版（EE）</li></ul><p>Docker Community Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的个人开发人员和小型团队。</p><p>Docker企业版（EE）专为企业开发和IT团队而设计，他们可以在生产中大规模构建，发布和运行业务关键型应用程序。</p><p><strong>Docker操作参数</strong></p><ul><li>用户在使用Docker时，使用Docker命令行工具<code>docker</code>与Docker daemon建立通讯。Docker daemon是Docker守护进程，负责接收并分发Docker命令。</li><li>使用<code>docker</code>命令或<code>docker help</code>命令获取docker的命令清单。</li><li>用户可以使用<code>docker COMMAND --help</code>命令查看该子命令的详细信息。</li></ul><table tabindex="0"><thead><tr><th>子命令分类</th><th>子命令</th></tr></thead><tbody><tr><td>Docker环境信息</td><td>info、version</td></tr><tr><td>容器生命周期管理</td><td>create、exec、kill、pause、restart、rm、run、start、stop、unpause</td></tr><tr><td>镜像仓库命令</td><td>login、logout、pull、push、search</td></tr><tr><td>镜像管理</td><td>build、images、import、load、rmi、save、tag、commit</td></tr><tr><td>容器运维操作</td><td>attach、export、inspect、port、ps、rename、stats、top、wait、cp、diff</td></tr><tr><td>系统日志信息</td><td>events、history、logs</td></tr></tbody></table><h2 id="安装docker" tabindex="-1">安装Docker <a class="header-anchor" href="#安装docker" aria-label="Permalink to &quot;安装Docker&quot;">​</a></h2><p><strong>安装环境：</strong></p><p><strong>Apple macOS Sierra 10.13.5</strong></p><p><strong>安装步骤：</strong></p><p><strong>1. 下载Docker for Mac。</strong></p><p>官方下载链接：<a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noreferrer">https://download.docker.com/mac/stable/Docker.dmg</a></p><p><strong>2. 安装Docker for Mac并启动。</strong></p><h2 id="测试docker版本" tabindex="-1">测试Docker版本 <a class="header-anchor" href="#测试docker版本" aria-label="Permalink to &quot;测试Docker版本&quot;">​</a></h2><ol><li>运行<code>docker --version</code>并确保您拥有受支持的Docker版本：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 18.03.1-ce,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9ee9f40</span></span></code></pre></div><ol start="2"><li>列出<code>hello-world</code>下载到您的计算机的图像：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><h2 id="测试docker安装" tabindex="-1">测试Docker安装 <a class="header-anchor" href="#测试docker安装" aria-label="Permalink to &quot;测试Docker安装&quot;">​</a></h2><ol><li>通过运行简单的Docker镜像<a href="https://hub.docker.com/_/hello-world/" target="_blank" rel="noreferrer">hello-world来</a>测试您的安装是否有效 ：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Docker!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shows</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> that</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> appears</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> working</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> correctly.</span></span></code></pre></div><ol start="2"><li>列出<code>hello-world</code>下载到您的计算机的图像：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              f2a91732366c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> months</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        1.85kB</span></span></code></pre></div><ol start="3"><li>列出<code>hello-world</code>在显示其消息后退出的容器（由图像生成）。如果它仍在运行，您将不需要<code>--all</code>选项：</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                     PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5855345a28b8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        hello-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;/hello&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 2 minutes ago                       focused_swartz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6a18ff436995</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        hello-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;/hello&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hours</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 2 hours ago                         distracted_poincare</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4094ae71e095</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        hello-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;/hello&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> months</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 6 months ago                        ecstatic_poincare</span></span></code></pre></div><h2 id="docker镜像加速" tabindex="-1">Docker镜像加速 <a class="header-anchor" href="#docker镜像加速" aria-label="Permalink to &quot;Docker镜像加速&quot;">​</a></h2><p>Docker在国内下载镜像的速度太慢，经常失败，所以使用阿里云提供的容器镜像仓库服务。<strong>如果不愿意配置镜像，直接进入<a href="https://dev.aliyun.com/search.html%E4%B8%AD%E5%AF%BB%E6%89%BE%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E3%80%82" target="_blank" rel="noreferrer">https://dev.aliyun.com/search.html中寻找镜像使用。</a></strong> 接下来介绍阿里云Docker镜像加速器，使用加速器将会提升您在国内获取Docker官方镜像的速度！</p><ol><li>进入<a href="https://cr.console.aliyun.com/?spm=5176.100239.blogcont29941.12.R6mUIX" target="_blank" rel="noreferrer">阿里云容器Hub服务</a>的控制台，并申请成为开发者。</li><li>点击左侧的<strong>加速器</strong>帮助页面就会显示<strong>您的专属加速器地址</strong>。</li><li>复制地址您的专属加速器地址，将地址填入Docker的配置中，路径如下：<strong>Preferences–&gt;Daemon–&gt;Basic–&gt;Registry mirrors</strong>，然后重启。</li></ol><h2 id="命令备忘录" tabindex="-1">命令备忘录 <a class="header-anchor" href="#命令备忘录" aria-label="Permalink to &quot;命令备忘录&quot;">​</a></h2><h3 id="查看帮助" tabindex="-1">查看帮助 <a class="header-anchor" href="#查看帮助" aria-label="Permalink to &quot;查看帮助&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><h3 id="查看版本和信息" tabindex="-1">查看版本和信息 <a class="header-anchor" href="#查看版本和信息" aria-label="Permalink to &quot;查看版本和信息&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span></code></pre></div><h3 id="运行docker镜像" tabindex="-1">运行Docker镜像 <a class="header-anchor" href="#运行docker镜像" aria-label="Permalink to &quot;运行Docker镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span></code></pre></div><h3 id="查看docker镜像列表" tabindex="-1">查看Docker镜像列表 <a class="header-anchor" href="#查看docker镜像列表" aria-label="Permalink to &quot;查看Docker镜像列表&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><h3 id="列出docker容器" tabindex="-1">列出Docker容器 <a class="header-anchor" href="#列出docker容器" aria-label="Permalink to &quot;列出Docker容器&quot;">​</a></h3><p>running ==&gt; 正在运行，all ==&gt; 全部，all in quiet mode ==&gt; 处于安静模式</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -aq</span></span></code></pre></div><h1 id="docker容器" tabindex="-1">Docker容器 <a class="header-anchor" href="#docker容器" aria-label="Permalink to &quot;Docker容器&quot;">​</a></h1><p>现在是时候开始使用Docker方式构建应用程序了。我们从这样一个应用程序层次结构的底部开始，这是一个容器，我们将在此页面上介绍它。</p><h2 id="您的新开发环境" tabindex="-1">您的新开发环境 <a class="header-anchor" href="#您的新开发环境" aria-label="Permalink to &quot;您的新开发环境&quot;">​</a></h2><p>在过去，如果您要开始编写Python应用程序，那么您的第一个业务是在您的计算机上安装Python运行时。但是，这会导致您的计算机上的环境需要非常适合您的应用程序按预期运行，并且还需要与您的生产环境相匹配。</p><p>使用Docker，您可以将可移植的Python运行时作为镜像获取，无需安装。然后，您的构建可以在应用程序代码旁边包含基本Python镜像，确保您的应用程序，其依赖项和运行时都一起运行。</p><p>这些可移植镜像像由称为a的东西定义<code>Dockerfile</code>。</p><h2 id="使用dockerfile定义容器" tabindex="-1">使用Dockerfile定义容器 <a class="header-anchor" href="#使用dockerfile定义容器" aria-label="Permalink to &quot;使用Dockerfile定义容器&quot;">​</a></h2><p><code>Dockerfile</code>定义容器内环境中发生的事情。对网络接口和磁盘驱动器等资源的访问在此环境中进行虚拟化，该环境与系统的其他部分隔离，因此您需要将端口映射到外部世界，并具体说明要“复制”到哪些文件那个环境。但是，在执行此操作之后，您可以预期<code>Dockerfile</code>在此处定义的应用程序的构建 在其运行的任何位置都会完全相同。</p><h3 id="dockerfile" tabindex="-1"><code>Dockerfile</code> <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;\`Dockerfile\`&quot;">​</a></h3><p>创建一个空目录。将目录（<code>cd</code>）更改为新目录，创建一个名为<code>Dockerfile</code>的文件，将以下内容复制并粘贴到该文件中，然后保存。记下解释新Dockerfile中每个语句的注释。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use an official Python runtime as a parent image</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python:2.7-slim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set the working directory to /app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the current directory contents into the container at /app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ADD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install any needed packages specified in requirements.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --trusted-host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pypi.python.org</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Make port 80 available to the world outside this container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPOSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define environment variable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run app.py when the container launches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.py&quot;]</span></span></code></pre></div><p>这<code>Dockerfile</code>是指我们尚未创建的几个文件，即 <code>app.py</code>和<code>requirements.txt</code>。让我们创建下一个。</p><h2 id="应用程序本身" tabindex="-1">应用程序本身 <a class="header-anchor" href="#应用程序本身" aria-label="Permalink to &quot;应用程序本身&quot;">​</a></h2><p>再创建两个文件，<code>requirements.txt</code>和<code>app.py</code>，并将它们与Dockerfile放在同一个文件夹中。 这完成了我们的应用程序，您可以看到它非常简单。 当上面的<code>Dockerfile</code>内置到镜像中时，由于<code>Dockerfile</code>的<code>ADD</code>命令，<code>app.py</code>和<code>requirements.txt</code>存在，并且由于<code>EXPOSE</code>命令，<code>app.py</code>的输出可通过HTTP访问。</p><h3 id="requirements-txt" tabindex="-1"><code>requirements.txt</code> <a class="header-anchor" href="#requirements-txt" aria-label="Permalink to &quot;\`requirements.txt\`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flask</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Redis</span></span></code></pre></div><h3 id="app-py" tabindex="-1"><code>app.py</code> <a class="header-anchor" href="#app-py" aria-label="Permalink to &quot;\`app.py\`&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Redis, RedisError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Connect to Redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Redis(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;redis&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">db</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket_connect_timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">socket_timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        visits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis.incr(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;counter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RedisError:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        visits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;h3&gt;Hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&lt;/h3&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{hostname}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;br/&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;&lt;b&gt;Visits:&lt;/b&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{visits}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html.format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.getenv(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;NAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hostname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.gethostname(), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">visits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">visits)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.run(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>现在我们看到<code>pip install -r requirements.txt</code>为Python安装Flask和Redis库，应用程序打印环境变量<code>NAME</code>，以及调用的输出<code>socket.gethostname()</code>。最后，因为Redis没有运行（因为我们只安装了Python库，而不是Redis本身），我们应该期望在这里使用它的尝试失败并产生错误消息。</p><blockquote><p><strong>注意</strong>：在容器内部访问容器ID时，访问主机名称，这类似于正在运行的可执行文件的进程ID。</p></blockquote><p>仅此而已！您不需要Python或<code>requirements.txt</code>系统中的任何内容，也不需要构建或运行此映像将它们安装在您的系统上。看起来你并没有真正建立一个Python和Flask的环境，但你有。</p><h2 id="构建应用程序" tabindex="-1">构建应用程序 <a class="header-anchor" href="#构建应用程序" aria-label="Permalink to &quot;构建应用程序&quot;">​</a></h2><p>我们准备构建应用程序。确保您仍处于新目录的顶层。这是<code>ls</code>应该显示的内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Dockerfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		app.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			requirements.txt</span></span></code></pre></div><p>现在运行build命令。这会创建一个Docker镜像，我们将使用<code>-t</code>它来标记，因此它具有友好的名称。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>你构建的镜像在哪里？它位于您机器的本地Docker镜像仓库中：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friendlyhello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              326387cea398</span></span></code></pre></div><blockquote><p>Linux用户的故障排除</p><p><em>代理服务器设置</em></p><p>代理服务器可以在启动并运行后阻止与Web应用程序的连接。如果您位于代理服务器后面，请使用以下<code>ENV</code>命令将以下行添加到Dockerfile中，以指定代理服务器的主机和端口：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set proxy server, replace host:port with values for your servers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http_proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host:port</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENV</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https_proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host:port</span></span></code></pre></div><p><em>DNS设置</em></p><p>DNS配置错误可能会产生与<code>pip</code>相关问题。您需要设置自己的DNS服务器地址才能使<code>pip</code>正常工作。您可能想要更改Docker守护程序的DNS设置。您可以<code>/etc/docker/daemon.json</code>使用<code>dns</code>密钥编辑（或创建）配置文件，如下所示：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;dns&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your_dns_address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.8.8.8&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中，列表的第一个元素是DNS服务器的地址。第二项是Google的DNS，可在第一项无法使用时使用。</p><p>在继续之前，请保存<code>daemon.json</code>并重新启动docker服务。</p><p><code>sudo service docker restart</code></p><p>修复后，重试运行该<code>build</code>命令。</p></blockquote><h2 id="运行该应用程序" tabindex="-1">运行该应用程序 <a class="header-anchor" href="#运行该应用程序" aria-label="Permalink to &quot;运行该应用程序&quot;">​</a></h2><p>运行应用程序，使用<code>-p</code>将计算机的端口4000映射到容器的已发布端口80：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4000:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span></span></code></pre></div><p>您应该看到Python正在为您的应用程序提供服务的消息<code>http://0.0.0.0:80</code>。但是该消息来自容器内部，它不知道您将该容器的端口80映射到4000，从而生成正确的URL <code>http://localhost:4000</code>。</p><p>在Web浏览器中转到该URL，以查看在网页上提供的显示内容。</p><p><img src="https://docs.docker.com/get-started/images/app-in-browser.png" alt="浏览器中的Hello World"></p><blockquote><p><strong>注意</strong>：如果您在Windows 7上使用Docker Toolbox，请使用Docker Machine IP而不是<code>localhost</code>。例如，http：<a href="//192.168.99.100" target="_blank" rel="noreferrer">//192.168.99.100</a>：4000 /。要查找IP地址，请使用该命令<code>docker-machine ip</code>。</p></blockquote><p>您还可以<code>curl</code>在shell中使用该命令来查看相同的内容。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:4000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">3&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello World</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/h3&gt;&lt;b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hostname:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 8fc990912a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">14&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">br/&gt;&lt;b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Visits:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cannot connect to Redis, counter disabled</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>此端口重新映射<code>4000:80</code>是为了演示您<code>EXPOSE</code>内部<code>Dockerfile</code>和您<code>publish</code>使用的 内容之间的差异<code>docker run -p</code>。在后面的步骤中，我们只是将主机上的端口80映射到容器中的端口80并使用<code>http://localhost</code>。</p><p>点击<code>CTRL+C</code>你的终端退出。</p><blockquote><p>在Windows上，显式停止容器</p><p>在Windows系统上，<code>CTRL+C</code>不会停止容器。因此，首先键入<code>CTRL+C</code>以获取提示（或打开另一个shell），然后键入 <code>docker container ls</code>以列出正在运行的容器，然后<code>docker container stop &lt;Container NAME or ID&gt;</code>停止容器。否则，当您尝试在下一步中重新运行容器时，会从守护程序收到错误响应。</p></blockquote><p>现在让我们以分离模式在后台运行应用程序：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4000:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span></span></code></pre></div><p>您获得应用程序的长容器ID，然后被踢回终端。您的容器正在后台运行。您还可以看到缩写的容器ID <code>docker container ls</code>（并且在运行命令时都可以互换）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             CREATED</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1fa4ab2cf395</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        friendlyhello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;python app.py&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     28</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span></span></code></pre></div><p>请注意，<code>CONTAINER ID</code>匹配的是什么<code>http://localhost:4000</code>。</p><p>现在<code>docker container stop</code>用来结束这个过程，使用<code>CONTAINER ID</code>如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1fa4ab2cf395</span></span></code></pre></div><h2 id="分享你的形象" tabindex="-1">分享你的形象 <a class="header-anchor" href="#分享你的形象" aria-label="Permalink to &quot;分享你的形象&quot;">​</a></h2><p>为了演示我们刚刚创建的内容的可移植性，让我们上传我们构建的图像并在其他地方运行它。毕竟，当您想要将容器部署到生产环境时，您需要知道如何推送到注册表。</p><p>注册表是存储库的集合，存储库是图像的集合 - 类似于GitHub存储库，除了代码已经构建。注册表上的帐户可以创建许多存储库。该<code>docker</code>CLI使用泊坞窗的公共注册表默认情况下。</p><blockquote><p><strong>注意</strong>：我们在这里使用Docker的公共注册表只是因为它是免费和预先配置的，但有许多公共注册表可供选择，您甚至可以使用<a href="https://docs.docker.com/datacenter/dtr/2.2/guides/" target="_blank" rel="noreferrer">Docker Trusted Registry</a>设置自己的私有注册表。</p></blockquote><h3 id="使用您的docker-id登录" tabindex="-1">使用您的Docker ID登录 <a class="header-anchor" href="#使用您的docker-id登录" aria-label="Permalink to &quot;使用您的Docker ID登录&quot;">​</a></h3><p>如果您没有Docker帐户，请在<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">hub.docker.com上</a>注册一个帐户 。记下您的用户名。</p><p>登录本地计算机上的Docker公共注册表。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><h3 id="标记图像" tabindex="-1">标记图像 <a class="header-anchor" href="#标记图像" aria-label="Permalink to &quot;标记图像&quot;">​</a></h3><p>将本地映像与注册表上的存储库相关联的表示法是 <code>username/repository:tag</code>。标签是可选的，但建议使用，因为它是注册管理机构用来为Docker镜像提供版本的机制。为上下文提供存储库和标记有意义的名称，例如 <code>get-started:part2</code>。这会将图像放入<code>get-started</code>存储库并将其标记为<code>part2</code>。</p><p>现在，把它们放在一起来标记图像。<code>docker tag image</code>使用您的用户名，存储库和标记名称运行，以便将图像上载到所需的目标位置。该命令的语法是：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username/repository:tag</span></span></code></pre></div><p>例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gordon/get-started:part2</span></span></code></pre></div><p>运行<a href="https://docs.docker.com/engine/reference/commandline/image_ls/" target="_blank" rel="noreferrer">docker image ls</a>以查看新标记的图像。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                 IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">friendlyhello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              d9e555c53008</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       195MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gordon/get-started</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         part2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               d9e555c53008</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       195MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                   2.7-slim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            1c7128a655f6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          183MB</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><h3 id="发布镜像" tabindex="-1">发布镜像 <a class="header-anchor" href="#发布镜像" aria-label="Permalink to &quot;发布镜像&quot;">​</a></h3><p>将标记的镜像上传到存储库：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username/repository:tag</span></span></code></pre></div><p>完成后，此上传的结果将公开发布。如果您登录到<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a>，则会在其中看到新图像及其pull命令。</p><h3 id="从远程存储库中拉出并运行镜像" tabindex="-1">从远程存储库中拉出并运行镜像 <a class="header-anchor" href="#从远程存储库中拉出并运行镜像" aria-label="Permalink to &quot;从远程存储库中拉出并运行镜像&quot;">​</a></h3><p>从现在开始，您可以使用<code>docker run</code>以下命令在任何计算机上使用和运行您的应用程序：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4000:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username/repository:tag</span></span></code></pre></div><p>如果映像在计算机上不可用，则Docker会从存储库中提取映像。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4000:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gordon/get-started:part2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gordon/get-started:part2&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> locally</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">part2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pulling</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gordon/get-started</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">10a267c67f42:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f68a39a6a5e4:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">9beaffc0cf19:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3c1fe835fb6b:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4c9f1fa8fcb8:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ee7d8f576a14:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fbccdcced46e:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Already</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exists</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Digest:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sha256:0601c866aab2adcc6498200efd0f754037e909e5fd42069adeff72d1e2439068</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Downloaded</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> newer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gordon/get-started:part2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://0.0.0.0:80/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Press </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">CTRL+C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>无论在哪里<code>docker run</code>执行，它都会提取您的图像，以及Python和所有依赖项<code>requirements.txt</code>，并运行您的代码。它们都在一个整洁的小包中一起旅行，你不需要在主机上安装任何东西，以便Docker运行它。</p><h2 id="命令备忘录-1" tabindex="-1">命令备忘录 <a class="header-anchor" href="#命令备忘录-1" aria-label="Permalink to &quot;命令备忘录&quot;">​</a></h2><p>以下是此页面中基本Docker命令的列表，以及一些相关的命令，如果您想在继续之前稍微探索一下。</p><h3 id="使用该目录的dockerfile创建映像" tabindex="-1">使用该目录的Dockerfile创建映像 <a class="header-anchor" href="#使用该目录的dockerfile创建映像" aria-label="Permalink to &quot;使用该目录的Dockerfile创建映像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="运行-friendlyname-映射端口4000到80" tabindex="-1">运行“friendlyname”映射端口4000到80 <a class="header-anchor" href="#运行-friendlyname-映射端口4000到80" aria-label="Permalink to &quot;运行“friendlyname”映射端口4000到80&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4000:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span></span></code></pre></div><h3 id="运行-friendlyname-映射端口4000到80-但在分离模式" tabindex="-1">运行“friendlyname”映射端口4000到80，但在分离模式 <a class="header-anchor" href="#运行-friendlyname-映射端口4000到80-但在分离模式" aria-label="Permalink to &quot;运行“friendlyname”映射端口4000到80，但在分离模式&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4000:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> friendlyhello</span></span></code></pre></div><h3 id="列出所有正在运行的容器" tabindex="-1">列出所有正在运行的容器 <a class="header-anchor" href="#列出所有正在运行的容器" aria-label="Permalink to &quot;列出所有正在运行的容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><h3 id="列出所有容器-甚至包括那些没有运行的容器" tabindex="-1">列出所有容器，甚至包括那些没有运行的容器 <a class="header-anchor" href="#列出所有容器-甚至包括那些没有运行的容器" aria-label="Permalink to &quot;列出所有容器，甚至包括那些没有运行的容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><h3 id="优雅地停止指定的容器" tabindex="-1">优雅地停止指定的容器 <a class="header-anchor" href="#优雅地停止指定的容器" aria-label="Permalink to &quot;优雅地停止指定的容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="强制关闭指定容器" tabindex="-1">强制关闭指定容器 <a class="header-anchor" href="#强制关闭指定容器" aria-label="Permalink to &quot;强制关闭指定容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="从机器中删除指定容器" tabindex="-1">从机器中删除指定容器 <a class="header-anchor" href="#从机器中删除指定容器" aria-label="Permalink to &quot;从机器中删除指定容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="删除所有容器" tabindex="-1">删除所有容器 <a class="header-anchor" href="#删除所有容器" aria-label="Permalink to &quot;删除所有容器&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="列出该机器上的所有镜像" tabindex="-1">列出该机器上的所有镜像 <a class="header-anchor" href="#列出该机器上的所有镜像" aria-label="Permalink to &quot;列出该机器上的所有镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><h3 id="从机器中删除指定的图像" tabindex="-1">从机器中删除指定的图像 <a class="header-anchor" href="#从机器中删除指定的图像" aria-label="Permalink to &quot;从机器中删除指定的图像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="从机器中删除所有镜像" tabindex="-1">从机器中删除所有镜像 <a class="header-anchor" href="#从机器中删除所有镜像" aria-label="Permalink to &quot;从机器中删除所有镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="使用docker凭证在这个cli会话中记录日志" tabindex="-1">使用Docker凭证在这个CLI会话中记录日志 <a class="header-anchor" href="#使用docker凭证在这个cli会话中记录日志" aria-label="Permalink to &quot;使用Docker凭证在这个CLI会话中记录日志&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><h3 id="标签-镜像-上传至仓库" tabindex="-1">标签&lt;镜像&gt;上传至仓库 <a class="header-anchor" href="#标签-镜像-上传至仓库" aria-label="Permalink to &quot;标签&lt;镜像&gt;上传至仓库&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">imag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username/repository:tag</span></span></code></pre></div><h3 id="上传带标签的镜像到仓库" tabindex="-1">上传带标签的镜像到仓库 <a class="header-anchor" href="#上传带标签的镜像到仓库" aria-label="Permalink to &quot;上传带标签的镜像到仓库&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username/repository:tag</span></span></code></pre></div><h3 id="从仓库运行镜像" tabindex="-1">从仓库运行镜像 <a class="header-anchor" href="#从仓库运行镜像" aria-label="Permalink to &quot;从仓库运行镜像&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username/repository:tag</span></span></code></pre></div>`,152),n=[h];function l(p,k,d,r,o,F){return a(),i("div",null,n)}const y=s(t,[["render",l]]);export{g as __pageData,y as default};
